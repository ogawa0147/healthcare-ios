//
//  Resolver.swift
//  Generated by dikitgen.
//

import CoreLocation
import DIKit
import Domain
import Environments
import Foundation
import Infrastructure
import RxCocoa
import RxSwift
import UIKit

extension AppResolver {

    func resolveAppResolver() -> AppResolver {
        return provideResolver()
    }

    func resolveHomeNavigatorImpl(navigationController: UINavigationController) -> HomeNavigatorImpl {
        let appResolver = resolveAppResolver()
        return HomeNavigatorImpl(dependency: .init(resolver: appResolver, navigationController: navigationController))
    }

    func resolveHomeViewController(navigator: HomeNavigator, authorizationUseCase: HealthKitAuthorizationUseCase, homeTimelineUseCase: HomeTimelineUseCase) -> HomeViewController {
        let homeViewModel = resolveHomeViewModel(navigator: navigator, authorizationUseCase: authorizationUseCase, homeTimelineUseCase: homeTimelineUseCase)
        return HomeViewController.makeInstance(dependency: .init(viewModel: homeViewModel))
    }

    func resolveHomeViewModel(navigator: HomeNavigator, authorizationUseCase: HealthKitAuthorizationUseCase, homeTimelineUseCase: HomeTimelineUseCase) -> HomeViewModel {
        return HomeViewModel(dependency: .init(navigator: navigator, authorizationUseCase: authorizationUseCase, homeTimelineUseCase: homeTimelineUseCase))
    }

    func resolveLaunchScreenNavigatorImpl(window: UIWindow?) -> LaunchScreenNavigatorImpl {
        let appResolver = resolveAppResolver()
        return LaunchScreenNavigatorImpl(dependency: .init(resolver: appResolver, window: window))
    }

    func resolveLaunchScreenViewController(navigator: LaunchScreenNavigator) -> LaunchScreenViewController {
        let launchScreenViewModel = resolveLaunchScreenViewModel(navigator: navigator)
        return LaunchScreenViewController.makeInstance(dependency: .init(viewModel: launchScreenViewModel))
    }

    func resolveLaunchScreenViewModel(navigator: LaunchScreenNavigator) -> LaunchScreenViewModel {
        return LaunchScreenViewModel(dependency: .init(navigator: navigator))
    }

    func resolveLocationNavigatorImpl(navigationController: UINavigationController) -> LocationNavigatorImpl {
        let appResolver = resolveAppResolver()
        return LocationNavigatorImpl(dependency: .init(resolver: appResolver, navigationController: navigationController))
    }

    func resolveLocationViewController(navigator: LocationNavigator, locationTimelineUseCase: LocationTimelineUseCase) -> LocationViewController {
        let locationViewModel = resolveLocationViewModel(navigator: navigator, locationTimelineUseCase: locationTimelineUseCase)
        return LocationViewController.makeInstance(dependency: .init(viewModel: locationViewModel))
    }

    func resolveLocationViewModel(navigator: LocationNavigator, locationTimelineUseCase: LocationTimelineUseCase) -> LocationViewModel {
        return LocationViewModel(dependency: .init(navigator: navigator, locationTimelineUseCase: locationTimelineUseCase))
    }

    func resolveMeasurementNavigatorImpl(navigationController: UINavigationController) -> MeasurementNavigatorImpl {
        let appResolver = resolveAppResolver()
        return MeasurementNavigatorImpl(dependency: .init(resolver: appResolver, navigationController: navigationController))
    }

    func resolveMeasurementViewController(navigator: MeasurementNavigator, measurementUseCase: MeasurementUseCase) -> MeasurementViewController {
        let measurementViewModel = resolveMeasurementViewModel(navigator: navigator, measurementUseCase: measurementUseCase)
        return MeasurementViewController.makeInstance(dependency: .init(viewModel: measurementViewModel))
    }

    func resolveMeasurementViewModel(navigator: MeasurementNavigator, measurementUseCase: MeasurementUseCase) -> MeasurementViewModel {
        return MeasurementViewModel(dependency: .init(navigator: navigator, measurementUseCase: measurementUseCase))
    }

    func resolveUseCase() -> UseCase {
        return provideUseCase()
    }

}

